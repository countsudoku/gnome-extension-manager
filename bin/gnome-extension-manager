#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
"""
GNOME-Extension-Manager

This little program is used to manage the GNOME Extensions in user space. The
commands should be similar than the ones are used for apt-get in Debian like
Linux distributions.
"""

import subprocess
import re
import urllib2
import json
import os

#TODO: The url should be configurable
BASE_URL = 'https://extensions.gnome.org'

CONFIG_DIR = os.getenv('XDG_CONFIG_HOME',
        os.path.join(os.environ['HOME'], '.config'))
CACHE_DIR = os.getenv('XDG_CACHE_HOME',
        os.path.join(os.environ['HOME'], '.cache'))
DATA_DIR = os.getenv('XDG_DATA_HOME',
        os.path.join(os.environ['HOME'], '.share'))

INSTALL_DIR = os.path.join(DATA_DIR, 'gnome-shell', 'extensions')


def get_gnome_shell_version():
    """
    This function is to get the installed gnome-shell version
    """
    gnome_shell_version = re.sub(r'^\s*GNOME\s*Shell\s*((\d+\.)+\d+).*$', r'\1',
            subprocess.check_output(['gnome-shell', '--version'])
            )
    return gnome_shell_version

def gnome_query(baseurl, query, part=''):
    """
    This function downloads the catalog from the given url with the given
    query
    """
    info = urllib2.urlopen('{0}/{1}'.format(baseurl, query)).read()
    if part == '':
        return json.loads(info)
    else:
        return json.loads(info)[part]

def update_catalog(catalog_file, url):
    """
    This function downloads the catalog and compares it with the saved one.
    Then it should download the missing information and save the catalog
    again.

    dependencies: gnome_query, get_gnome_shell_version
    """
    shell_version = get_gnome_shell_version()

    if not os.path.exists(catalog_file):
        directory = os.path.dirname(catalog_file)
        if not os.path.exists(directory):
            os.makedirs(directory)

    print("getting extensions information...")
    catalog = gnome_query(url,
            'extension-query/?n_per_page=-1',
            'extensions'
            )

    with open(catalog_file, 'w') as f:
        json.dump({"shell_version": "3.4", "extensions": catalog}, f)

def init_argparser():
    """
    This function does the whole parsing oft command line arguments
    """
    import argparse

    parser = argparse.ArgumentParser()

    # Setup subcommands
    sub_commands = parser.add_subparsers(dest='command')

    # Adding all the subcommands
    install = sub_commands.add_parser('install',
            help='Download and install the extension'
            )
    remove = sub_commands.add_parser('remove',
            help='Deinstall an extension'
            )
    purge = sub_commands.add_parser('purge',
            help='Deinstall an extension and remove the configuration'
            )
    update = sub_commands.add_parser('update',
            help='Update the extensions catalog'
            )
    upgrade = sub_commands.add_parser('upgrade',
            help='Update the installed extensions'
            )
    activate = sub_commands.add_parser('activate',
            help='Activate an extensions'
            )
    deactivate = sub_commands.add_parser('deactivate',
            help='Deactivate an extensions'
            )

    install.add_argument('extensions', nargs='+')
    remove.add_argument('extensions', nargs='+')
    purge.add_argument('extensions', nargs='+')
    upgrade.add_argument('extensions', nargs='*')
    activate.add_argument('extensions', nargs='+')
    deactivate.add_argument('extensions', nargs='+')

    return parser

if __name__ == '__main__':
    args, extra_args = init_argparser().parse_known_args()

    catalog_file = os.path.join(CACHE_DIR,
            'gnome-extension-manager',
            'catalog.json')

    if args.command == 'update':
        update_catalog(catalog_file, BASE_URL)
