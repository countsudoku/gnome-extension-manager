#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
"""
GNOME-Extension-Manager

This little program is used to manage the GNOME Extensions in user space. The
commands should be similar than the ones are used for apt-get in Debian like
Linux distributions.
"""

from datetime import datetime
from json import JSONDecoder, JSONEncoder
import os
import re
import subprocess
import sys
import tempfile
import urllib2
import zipfile

# Some default values
VERSION = "0.0.1"

DEFAULT_BASE_URL = 'https://extensions.gnome.org'
DEFAULT_QUERY = '/extension-query/?n_per_page=-1'
DEFAULT_ITEM = 'extensions'
DEFAULT_TIMEOUT = 60

DEFAULT_GLOBAL_INSTALL_DIR = '/usr/share/gnome-shell/extensions'

if os.getuid() == 0:
    DEFAULT_INSTALL_DIR = DEFAULT_GLOBAL_INSTALL_DIR
    DEFAULT_CONFIG_DIR = '/etc'
    DEFAULT_CACHE_DIR = '/var/cache'
else:
    DEFAULT_HOME = os.environ['HOME']
    DEFAULT_CONFIG_DIR = os.getenv('XDG_CONFIG_HOME',
            os.path.join(DEFAULT_HOME, '.config'))
    DEFAULT_CACHE_DIR = os.getenv('XDG_CACHE_HOME',
            os.path.join(DEFAULT_HOME, '.cache'))
    DEFAULT_DATA_DIR = os.getenv('XDG_DATA_HOME',
            os.path.join(DEFAULT_HOME, '.local/share'))
    DEFAULT_INSTALL_DIR = os.path.join(DEFAULT_DATA_DIR,
            'gnome-shell',
            'extensions')


DEFAULT_CONFIG_FILE = os.path.join(DEFAULT_CONFIG_DIR,
        'gnome-extension-manager',
        'config.ini')

class NotInCatalog(Exception):
    def __init__(self, uuid):
        self.uuid = uuid

    def __str__(self):
        return "Can't find extension {0} in catalog".format(self.uuid)

class Extension(object):
    """
    This class does the extension parsing and installing
    """
    def __init__(self):
        self.uuid = ""
        self.name = ""
        self.creator = ""
        self.description = ""
        self.install_pk = None
        self.version = None

    def __str__(self):
        if self.creator != '':
            main = "{0} by {1}".format(self.name, self.creator)
        else:
            main = self.name
        uuid = "UUID: {0}".format(self.uuid)
        desc = "{0}".format(self.description)
        if self.install_pk:
            vers = "Version: {0} ({1})".format(self.version, self.install_pk)
        else:
            vers = "Version: {0}".format(self.version)

        return "\n{0}\n\n{1}\n{2}\n{3}".format(main, uuid, desc, vers)

    def __cmp__(self, other):
        if self.uuid != other.uuid:
            raise Exception("You don't compare the same Extension!")
        if self.version > other.version:
            return +1
        elif self.version < other.version:
            return -1
        else:
            return 0

    def get_from_catalog(self, json_dict, shell_version):
        """
        Parse object from catalog
        """
        self.name = json_dict['name']
        try:
            self.creator = json_dict['creator']
        except KeyError:
            pass
        self.description = json_dict['description']
        self.uuid = json_dict['uuid']

        stacked_versions = Extension.version_stack(shell_version)
        test_version = stacked_versions.pop()

        if 'version' in json_dict:
            self.version = json_dict['version']
        else:
            while test_version not in json_dict['shell_version_map']:
                if not stacked_versions:
                    raise Exception(
                       "Can't find extension {0} for your version of GNOME Shell".
                            format(self.uuid))
                else:
                    test_version = stacked_versions.pop()
            self.install_pk = json_dict['shell_version_map'][test_version]['pk']
            self.version = json_dict['shell_version_map'][test_version][ 'version']


    def download(self, url, query):
        """
        Download the given extension
        """
        pass

    def install(self, file_handle, path):
        """
        Install the extension in file to the path
        """
        pass

    def chek_installed(self, uuid):
        """
        Check if the Extension is installed
        """
        pass

    def remove(self, path):
        """
        Deinstall the given extension
        """
        pass

    def activate(self, uuid):
        """
        Activate an extension in gnome-shell
        """
        pass

    def deactivate(self, uuid):
        """
        Deactivate an extension in gnome-shell
        """
        pass

    @staticmethod
    def version_stack(version):
        """
        Helper method, which Returns a stack (list) of versions; with the most
        specific at top and the unspecific at bottom.

        So if you version is 3.15.1 the list is [ 3, 3.15, 3.15.1 ]
        """

        split_version = version.split('.')
        versions = []
        while split_version:
            versions.append('.'.join(split_version))
            del split_version[-1]

        versions.reverse()

        return versions

class Catalog(object):
    """
    A JSON dict which handles the catalog from extensions.gnome.org
    """
    def __init__(self, json_dict=None, indentation=2):
        self.catalog = json_dict or {}
        self.encoder = JSONEncoder(indent=indentation, separators=(',', ':'))
        self.decoder = JSONDecoder()

    def __str__(self):
        return self.encoder.encode(self.catalog)

    def load(self, filename):
        """
        This method loads the catalog from file with the path <filename>
        """
        with open(filename, 'r') as f:
            self.catalog = self.decoder.decode(f.read())

    def save(self, filename):
        """
        This method saves the catalog to a file with the path <filename>
        """
        if not os.path.exists(filename):
            directory = os.path.dirname(filename)
            if not os.path.exists(directory):
                os.makedirs(directory)

        with open(filename, 'w') as f:
            f.write(str(self))

    def dump(self):
        """
        dums the catalog for debugging purpose
        """
        print self

    def add_info(self):
        """
        Adding some basic infos to the catalog, for later use
        """
        d = datetime.now()
        timestamp = {}
        timestamp['year'] = d.year
        timestamp['month'] = d.month
        timestamp['day'] = d.day
        timestamp['hour'] = d.hour
        timestamp['minute'] = d.minute
        timestamp['second'] = d.second
        self.catalog['timestamp'] = timestamp

        gem = {}
        gem['version'] = VERSION
        self.catalog['gnome-extension-manager'] = gem

    def update(self, url, query, item, timeout):
        """
        This method updates the catalog from the <url> with the <query>
        """
        try:
            response = urllib2.urlopen(
                    '{0}/{1}'.format(url, query),
                    timeout=timeout
                    )
        except urllib2.HTTPError, e:
            print 'The server couldn\'t fulfill the request.'
            print 'Error code: ', e.code
            sys.exit(1)
        except urllib2.URLError, e:
            print 'We failed to reach a server.'
            print 'Reason: ', e.reason
            sys.exit(1)

        info = response.read()
        raw_catalog = self.decoder.decode(info)

        # some sanity checks:
        if raw_catalog['numpages'] != 1:
            raise Exception("Can't download all extension!")
        else:
            print "downloaded {0} extensions".format(raw_catalog['total'])

        # writing some info values
        self.add_info()

        # add the extension with uuid
        extensions = {}
        for extension in raw_catalog[item]:
            extensions[extension['uuid']] = extension

        self.catalog['extensions'] = extensions

    def get_extension(self, shell_version, uuid):
        """
        Get a single Extension object from the catalog
        """
        extensions = self.catalog['extensions']
        if uuid not in extensions:
            raise NotInCatalog(uuid)
        else:
            e = Extension()
            e.get_from_catalog(extensions[uuid], shell_version)
            return e

    def build_from_paths(self, *paths):
        """
        Build a Catalog from the installed pathes
        """
        dirs = []
        for path in paths:
            dirs += ["{0}/{1}".format(path,x) for x in os.listdir(path)]

        extensions = {}
        for directory in dirs:
            with open("{0}/metadata.json".format(directory), 'r') as f:
                extension = self.decoder.decode(f.read())
                extensions[extension['uuid']] = extension

        self.add_info()

        self.catalog['extensions'] = extensions

def get_gnome_shell_version():
    """
    This function is to get the installed gnome-shell version
    """
    gnome_shell_version = re.sub(r'^\s*GNOME\s*Shell\s*((\d+\.)+\d+).*$', r'\1',
            subprocess.check_output(['gnome-shell', '--version'])
            )
    return gnome_shell_version.rstrip()

def init_argparser():
    """
    This function does the whole parsing oft command line arguments
    """
    import argparse

    parser = argparse.ArgumentParser()

    parser.add_argument('-c', '--config',
            help='specify an alternative configuratin file. (default: {0})'.format(DEFAULT_CONFIG_FILE),
            default=DEFAULT_CONFIG_FILE,
            dest='config_file'
            )

    # Setup subcommands
    sub_commands = parser.add_subparsers(dest='command')

    # Adding all the subcommands
    install = sub_commands.add_parser('install',
            help='Download and install the extension'
            )
    remove = sub_commands.add_parser('remove',
            help='Deinstall an extension'
            )
    purge = sub_commands.add_parser('purge',
            help='Deinstall an extension and remove the configuration'
            )
    update = sub_commands.add_parser('update',
            help='Update the extensions catalog'
            )
    upgrade = sub_commands.add_parser('upgrade',
            help='Update the installed extensions'
            )
    activate = sub_commands.add_parser('activate',
            help='Activate an extensions'
            )
    deactivate = sub_commands.add_parser('deactivate',
            help='Deactivate an extensions'
            )

    install.add_argument('extensions', nargs='+')
    remove.add_argument('extensions', nargs='+')
    purge.add_argument('extensions', nargs='+')
    upgrade.add_argument('extensions', nargs='*')
    activate.add_argument('extensions', nargs='+')
    deactivate.add_argument('extensions', nargs='+')

    return parser

def init_confparser(config_file):
    """
    This parses the configuration file
    """
    import ConfigParser

    parser = ConfigParser.SafeConfigParser()

    parser.add_section('global')
    parser.set('global', 'timeout', str(DEFAULT_TIMEOUT))

    parser.add_section('Catalog')
    parser.set('Catalog', 'query', DEFAULT_QUERY)
    parser.set('Catalog', 'directory', os.path.join(DEFAULT_CACHE_DIR,
                'gnome-extension-manager',
                )
            )
    parser.set('Catalog', 'item', DEFAULT_ITEM)
    parser.set('Catalog', 'url', DEFAULT_BASE_URL)

    parser.add_section('Install')
    parser.set('Install', 'directory', DEFAULT_INSTALL_DIR)

    parser.read(config_file)

    return parser

if __name__ == '__main__':

    args, extra_args = init_argparser().parse_known_args()

    config = init_confparser(args.config_file)

    catalogfile = os.path.join(
            config.get('Catalog', 'directory'),
            'catalog.json',
            )
    catalog = Catalog()

    if args.command == 'update':
        catalog.update(
                url=config.get('Catalog', 'url'),
                query=config.get('Catalog', 'query'),
                item=config.get('Catalog', 'item'),
                timeout=float(config.get('global', 'timeout')),
                )
        catalog.save(filename=catalogfile)
    elif args.command == 'install':
        shell_version = get_gnome_shell_version()

        catalog.load(filename=catalogfile)

        installed_extensions = Catalog()
        installed_extensions.build_from_paths(
                DEFAULT_GLOBAL_INSTALL_DIR,
                config.get('Install', 'directory')
                )

        gnome_shell_version = get_gnome_shell_version()

        for extension in set(args.extensions):
            install = False
            e = catalog.get_extension(
                    uuid = extension,
                    shell_version = gnome_shell_version,
                    )
            print e
            try:
                i = installed_extensions.get_extension(
                    uuid = extension,
                    shell_version = gnome_shell_version,
                    )
            except NotInCatalog as e:
                install = True
            print i

